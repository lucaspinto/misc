ActiveRecord::Base.logger     = Logger.new STDOUT
ActiveRecord::Base.clear_reloadable_connections!
ActionController::Base.logger = Logger.new STDOUT
include Rails.application.routes.url_helpers
default_url_options[:host] = Rails.application.class.parent_name.downcase

class Hirb::Helpers::Route < Hirb::Helpers::AutoTable
  def self.render(output, options = {})
    super( output.requirements.map{ |k,v|
      [k, v.inspect]
    }, options.merge({
      :headers     => [output.name || '', "#{ output.verb || 'ANY' } #{ output.path }"],
      :unicode     => true,
      :description => nil,
    }) )
  end
end
Hirb.add_view ActionDispatch::Routing::Route, :class => Hirb::Helpers::Route

# short and long route list
def routes(long_output = false)
  if long_output
    Rails.application.routes.routes.each{ |e|
      puts Hirb::Helpers::Route.render(e)
    }
    true
  else
    Hirb::Console.render_output Rails.application.routes.routes.map{|e|
      [e.name || '', e.verb || 'ANY', e.path]
    },{
      :class   => Hirb::Helpers::AutoTable,
      :headers => %w<name verb path>,
    }
  end
end

# get a specific route via index or name
def route(index_or_name)
  route = case index_or_name
  when Integer
    Rails.application.routes.routes[ index_or_name ]
  when Symbol # named route
    Rails.application.routes.named_routes.get index_or_name
  end
end

# access to routeset for easy recognize / generate
def r
  ActionController::Routing::Routes
end

module Ripl::RailsPrompt
  def prompt
    @prompt = "#{ Rails.application.class.parent_name.downcase }(#{ Rails.env[0...3] })> "
    super
  end
end
Ripl::Shell.include Ripl::RailsPrompt

app_name = Rails.application.class.parent_name.downcase
app_env  = Rails.env[0...3]
IRB.conf[:PROMPT] ||= {}
IRB.conf[:PROMPT][:RAILS] = {
  :PROMPT_I => "#{ app_name }(#{ app_env })> ",
  :PROMPT_N => "#{ app_name }(#{ app_env })| ",
  :PROMPT_C => "#{ app_name }(#{ app_env })| ",
  :PROMPT_S => "#{ app_name }(#{ app_env })%l ",
  :RETURN => "=> %s\n",
  :AUTO_INDENT => true,
}
IRB.conf[:PROMPT_MODE] = :RAILS

def sql(query)
  ActiveRecord::Base.connection.select_all(query)
end

# # #
# edit records with vim, emacs...
# class Url
#   can_console_update
# end
# Url.first.console_update
# see https://github.com/cldwalker/console_update
require 'rubygems'
require 'interactive_editor'
require 'console_update'
